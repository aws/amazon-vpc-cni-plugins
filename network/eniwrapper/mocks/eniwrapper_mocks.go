// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-plugins/network/eniwrapper (interfaces: ENI)

// Package mock_eniwrapper is a generated GoMock package.
package mock_eniwrapper

import (
	net "net"
	reflect "reflect"

	eni "github.com/aws/amazon-vpc-cni-plugins/network/eni"
	gomock "github.com/golang/mock/gomock"
)

// MockENI is a mock of ENI interface
type MockENI struct {
	ctrl     *gomock.Controller
	recorder *MockENIMockRecorder
}

// MockENIMockRecorder is the mock recorder for MockENI
type MockENIMockRecorder struct {
	mock *MockENI
}

// NewMockENI creates a new mock instance
func NewMockENI(ctrl *gomock.Controller) *MockENI {
	mock := &MockENI{ctrl: ctrl}
	mock.recorder = &MockENIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockENI) EXPECT() *MockENIMockRecorder {
	return m.recorder
}

// NewBranch mocks base method
func (m *MockENI) NewBranch(arg0 *eni.Trunk, arg1 string, arg2 net.HardwareAddr, arg3 int) (*eni.Branch, error) {
	ret := m.ctrl.Call(m, "NewBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*eni.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBranch indicates an expected call of NewBranch
func (mr *MockENIMockRecorder) NewBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBranch", reflect.TypeOf((*MockENI)(nil).NewBranch), arg0, arg1, arg2, arg3)
}

// NewENI mocks base method
func (m *MockENI) NewENI(arg0 string, arg1 net.HardwareAddr) (*eni.ENI, error) {
	ret := m.ctrl.Call(m, "NewENI", arg0, arg1)
	ret0, _ := ret[0].(*eni.ENI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewENI indicates an expected call of NewENI
func (mr *MockENIMockRecorder) NewENI(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewENI", reflect.TypeOf((*MockENI)(nil).NewENI), arg0, arg1)
}

// NewTrunk mocks base method
func (m *MockENI) NewTrunk(arg0 string, arg1 net.HardwareAddr, arg2 eni.IsolationMode) (*eni.Trunk, error) {
	ret := m.ctrl.Call(m, "NewTrunk", arg0, arg1, arg2)
	ret0, _ := ret[0].(*eni.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTrunk indicates an expected call of NewTrunk
func (mr *MockENIMockRecorder) NewTrunk(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTrunk", reflect.TypeOf((*MockENI)(nil).NewTrunk), arg0, arg1, arg2)
}
