// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-plugins/network/netns (interfaces: NetNS,NetNSProvider)

// Package mock_netns is a generated GoMock package.
package mock_netns

import (
	reflect "reflect"

	netns "github.com/aws/amazon-vpc-cni-plugins/network/netns"
	gomock "github.com/golang/mock/gomock"
)

// MockNetNS is a mock of NetNS interface
type MockNetNS struct {
	ctrl     *gomock.Controller
	recorder *MockNetNSMockRecorder
}

// MockNetNSMockRecorder is the mock recorder for MockNetNS
type MockNetNSMockRecorder struct {
	mock *MockNetNS
}

// NewMockNetNS creates a new mock instance
func NewMockNetNS(ctrl *gomock.Controller) *MockNetNS {
	mock := &MockNetNS{ctrl: ctrl}
	mock.recorder = &MockNetNSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetNS) EXPECT() *MockNetNSMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNetNS) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNetNSMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetNS)(nil).Close))
}

// GetFd mocks base method
func (m *MockNetNS) GetFd() uintptr {
	ret := m.ctrl.Call(m, "GetFd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// GetFd indicates an expected call of GetFd
func (mr *MockNetNSMockRecorder) GetFd() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFd", reflect.TypeOf((*MockNetNS)(nil).GetFd))
}

// GetPath mocks base method
func (m *MockNetNS) GetPath() string {
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockNetNSMockRecorder) GetPath() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockNetNS)(nil).GetPath))
}

// Run mocks base method
func (m *MockNetNS) Run(arg0 func() error) error {
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockNetNSMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNetNS)(nil).Run), arg0)
}

// Set mocks base method
func (m *MockNetNS) Set() error {
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockNetNSMockRecorder) Set() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockNetNS)(nil).Set))
}

// MockNetNSProvider is a mock of NetNSProvider interface
type MockNetNSProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNetNSProviderMockRecorder
}

// MockNetNSProviderMockRecorder is the mock recorder for MockNetNSProvider
type MockNetNSProviderMockRecorder struct {
	mock *MockNetNSProvider
}

// NewMockNetNSProvider creates a new mock instance
func NewMockNetNSProvider(ctrl *gomock.Controller) *MockNetNSProvider {
	mock := &MockNetNSProvider{ctrl: ctrl}
	mock.recorder = &MockNetNSProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetNSProvider) EXPECT() *MockNetNSProviderMockRecorder {
	return m.recorder
}

// GetNetNS mocks base method
func (m *MockNetNSProvider) GetNetNS(arg0 string) (netns.NetNS, error) {
	ret := m.ctrl.Call(m, "GetNetNS", arg0)
	ret0, _ := ret[0].(netns.NetNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetNS indicates an expected call of GetNetNS
func (mr *MockNetNSProviderMockRecorder) GetNetNS(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetNS", reflect.TypeOf((*MockNetNSProvider)(nil).GetNetNS), arg0)
}

// GetNetNSByName mocks base method
func (m *MockNetNSProvider) GetNetNSByName(arg0 string) (netns.NetNS, error) {
	ret := m.ctrl.Call(m, "GetNetNSByName", arg0)
	ret0, _ := ret[0].(netns.NetNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetNSByName indicates an expected call of GetNetNSByName
func (mr *MockNetNSProviderMockRecorder) GetNetNSByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetNSByName", reflect.TypeOf((*MockNetNSProvider)(nil).GetNetNSByName), arg0)
}

// GetNetNSByPath mocks base method
func (m *MockNetNSProvider) GetNetNSByPath(arg0 string) (netns.NetNS, error) {
	ret := m.ctrl.Call(m, "GetNetNSByPath", arg0)
	ret0, _ := ret[0].(netns.NetNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetNSByPath indicates an expected call of GetNetNSByPath
func (mr *MockNetNSProviderMockRecorder) GetNetNSByPath(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetNSByPath", reflect.TypeOf((*MockNetNSProvider)(nil).GetNetNSByPath), arg0)
}
